// Copyright 2024 - Tomas Bartipan
// Licensed under MIT license - See License.txt for details.
// Special credits go to :
// Temaran (compute shader tutorial), TheHugeManatee (original concept) and Ryan Brucks(original raymarching code).

//
// This shader propagates adding (or removing) a light in a single slice of a volume texture.
// (Has to be invoked per-slice to propagate through whole volume).
//

#include "/Engine/Private/Common.ush"
#include "RaymarcherCommon.usf"
#include "WindowedSampling.usf"

// The Light Volume we're modifying in this shader.
RWTexture3D<float> ALightVolume;

// Read buffer where light propagated until previous slice is saved.
// The read buffer uses a set border color (the light outside the volume is not occluded by anything ->
// sampling outside means full original light.)
globallycoherent RWTexture2D<float> RWLightBuffer;

// The value to be returned when sampling from Read/Write buffer outside of it's bounds.
float BufferBorderValue;

// Offset from current pixel position into the read buffer - depending on where the light is
// in relation to the propagation axis. (e.g. will be (0,0) if the light is propagating exactly along the axis)
float2 PrevPixelOffset;

// Offset in the volume where to sample the occluding samples. To get shadowing at this position, we
// want to sample a certain distance against the light direction.
float3 UVWOffset;

// Loop control variables
int Start;
int Stop;
int AxisDirection;

// The shader code is common for all axes and always 2D in X and Y space
// If going along X - threadgroup X = Volume Y dimension, threadgroup Y = Volume Z dimension
// If going along Y - threadgroup X = Volume X dimension, threadgroup Y = Volume Z dimension
// If going along Z - threadgroup X = Volume X dimension, threadgroup Y = Volume Y dimension (the simple case)
// -> the Permutation Matrix is used to get 3D coordinates from 2D coordinates and Loop
float3x3 PermutationMatrix;

// The Volume we're propagating light through.
Texture3D Volume;
// The volume's sampler (has a fixed border color of 0 because sampling outside should not occlude light)
SamplerState VolumeSampler;

// Transfer function applied to the volume samples.
Texture2D TransferFunc;
SamplerState TransferFuncSampler;

// Clipping plane parameters.
float3 LocalClippingCenter;
float3 LocalClippingDirection;

// Windowing parameters to be able to display intensities of interest.
float4 WindowingParameters;

// Step sizes - these are neccessary, as we need to account for the distance travelled through the volume
// to get actual opacity.
float StepSize;

// +1 if we're adding a light, -1 if we're removing a light.
int bAdded;

// float lerp(float s, float e, float t)
//{
//    return s + (e - s) * t;
// }

// Need manual bilinear interpolation to interpolate from RWTexture Loads.
float blerp(float c00, float c10, float c01, float c11, float2 T_XY)
{
	// Lerp both rows on X and then lerp the result on Y.
	return lerp(lerp(c00, c10, T_XY.x), lerp(c01, c11, T_XY.x), T_XY.y);
}

// Perform 4 manual Loads from a RWTexture2D and perform bilinear interpolation to emulate
// Sample() function.
float SampleRWTexture2D(RWTexture2D<float> Tex, float2 UVs, float2 Dimensions)
{
	// Where in the sample we want to Sample from, transformed from UVs into texture
	// array space (e.g. Sample Pos == (1.0, 1.0) means we want to sample the exact center of
	// the pixel at Tex.Load(1,1);
	// Dimensions are decreased by 0.5 to get to the proper pixel center.
	float2 SamplePos = (Dimensions * saturate(UVs)) - float2(0.5, 0.5);
	// Get int position for load and float offset of actual Sample Point from the int
	int2 LoadPos = int2(floor(SamplePos));
	float2 T_XY = frac(SamplePos);

	return blerp(Tex[LoadPos], Tex[LoadPos + int2(1, 0)], Tex[LoadPos + int2(0, 1)], Tex[LoadPos + int2(1, 1)], T_XY);
}

[numthreads(16, 16, 1)] void MainComputeShader(uint2 PixelLoc
											   : SV_DispatchThreadID)
{
	float texSizeX, texSizeY;
	RWLightBuffer.GetDimensions(texSizeX, texSizeY);

	uint sizeX, sizeY, sizeZ;
	ALightVolume.GetDimensions(sizeX, sizeY, sizeZ);
	uint3 uResolution = uint3(sizeX, sizeY, sizeZ);

	float2 PreviousUV = ((PixelLoc + float2(0.5, 0.5)) / float2(texSizeX, texSizeY)) + PrevPixelOffset;

	for (int Loop = Start; Loop != Stop; Loop += AxisDirection)
	{
		int3 pos = mul(int3(PixelLoc.x, PixelLoc.y, Loop), PermutationMatrix);
		// Sample the volume intensity at previous voxel.
		float3 SampleUVW = GetUVW(pos, uResolution) + UVWOffset;

		// Sample light from read buffer at the corresponding UV coordinates.
		float PreviousLightAlpha = 0.0f;

		// If UVs are out of (0,1) range, return BorderValue
		// (-> reading light from outside the volume - cannot be shadowed)
		// #TODO check this only once outside of the loop - if we're reading outside once,
		// we're reading outside all the time.

		if (Loop == Start || any(saturate(PreviousUV) != PreviousUV))
		{
			PreviousLightAlpha = BufferBorderValue;
		}
		else
		{
			PreviousLightAlpha = SampleRWTexture2D(RWLightBuffer, PreviousUV, float2(texSizeX, texSizeY));
		}

		float DistanceToCuttingPlane = dot(SampleUVW - LocalClippingCenter, LocalClippingDirection);

		// Calculate the distance of the current voxel from the cutting plane in voxel space.
		float3 CuttingPlaneIntersectPoint = SampleUVW + LocalClippingDirection * DistanceToCuttingPlane;
		float3 CuttingPlaneOffset = SampleUVW - CuttingPlaneIntersectPoint;
		// Offset to cutting plane in voxel space.
		float3 VoxelCuttingPlaneOffset = CuttingPlaneOffset * uResolution;
		// Distance from cutting plane to voxel center in voxel space.
		float VoxelDistance = length(VoxelCuttingPlaneOffset);

		// Weight the alpha in the voxel by an
		// aproximation of the part of the cube that's not cut away - this prevents noticeable clipping plane artifacts
		// (even though it's not even close to being mathematically correct and the artifacts are still slightly visible).

		// Use signum of the DistanceToCuttingPlane, because the weight of a voxel, that's barely
		// NOT cut away should increase with the distance to the cutting plane, but the weight
		// of a voxel cut away will decrease with the distance to the cutting plane.
		// If the distance of the center of the voxel to the cutting plane is 0, then exactly half is cut away.
		float AlphaWeight = clamp(0.5 + (ONE_OVER_SQRT_3 * VoxelDistance * sign(DistanceToCuttingPlane)), 0, 1);

		// Initialize current sample.
		float CurrentSample = 0.0;
		// Only sample if previous sampling spot isn't completely cut-away by the cutting plane.
		if (AlphaWeight > 0.0 && all(SampleUVW == saturate(SampleUVW)))
		{
			CurrentSample = SampleWindowedVolumeStep(
				SampleUVW, StepSize * VOLUME_DENSITY, Volume, VolumeSampler, TransferFunc, TransferFuncSampler, WindowingParameters)
								.a;
			CurrentSample *= AlphaWeight;
		}

		// Extinct previous light by the opacity between this and previous sample.
		float CurrentLightAlpha = PreviousLightAlpha * (1 - CurrentSample);

		// need to wait for the whole GPU to finish reads from the RWLightBuffer before writing to it, otherwise
		// we would have race conditions.
		AllMemoryBarrierWithGroupSync();

		// The read/write buffers have always positive values (the alpha of current light being propagated)
		RWLightBuffer[PixelLoc] = CurrentLightAlpha;

		// And also need to wait for everyone to finish writing to the buffer, as otherwise we might read garbage in the next
		// iteration.
		AllMemoryBarrierWithGroupSync();

		// Ignore changes smaller than 0.001 to avoid writes with almost no effect.
		if (abs(CurrentLightAlpha) > 0.001f)
		{
			// If we're removing a light, multiply alpha by -1. (but read/write buffers stay positive)
			ALightVolume[pos] = ALightVolume[pos] + (CurrentLightAlpha * bAdded);
		}
	}
}
