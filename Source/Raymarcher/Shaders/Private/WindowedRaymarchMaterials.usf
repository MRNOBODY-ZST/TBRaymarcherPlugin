// Copyright 2021 Tomas Bartipan and Technical University of Munich.
// Licensed under MIT license - See License.txt for details.
// Special credits go to : Temaran (compute shader tutorial), TheHugeManatee (original concept, supervision) and Ryan Brucks
// (original raymarching code).

#include "RaymarcherCommon.usf"
#include "RaymarchMaterialCommon.usf"
#include "WindowedSampling.usf"

int3 GetVolumeLoadingDimensions(Texture3D Volume)
{
    int x, y, z;
    Volume.GetDimensions(x, y, z);
    // Decrease dimensions by 1, because with any UVW coord being == 1, we would load one after the array length
    // E.G - with X dimension == 2, U == 1, we want to sample x[1], not x[2] (as that doesn't exist)
    return int3(x - 1, y - 1, z - 1);
}

// Performs one raymarch step and accumulates the result to the existing Accumulated Light Energy.
// Notice "Material.Clamp_WorldGroupSettings" used as a sampler. These are UE shared samplers.
void AccumulateWindowedRaymarchStep(inout float4 AccumulatedLightEnergy, float3 CurPos, Texture3D DataVolume, SamplerState DataVolumeSampler,
                                 Texture2D TF, Texture3D LightVolume, float StepSize,
                                 float4 WindowingParams)
{
    float4 ColorSample = SampleWindowedVolumeStep(CurPos, StepSize, DataVolume, DataVolumeSampler,
                                               TF, Material.Clamp_WorldGroupSettings, WindowingParams);
    
    // Get lighting information from illumination volume for current position and
    // Multiply sampled color with light color to adjust intensity according to light strength.
    //ColorSample.rgb = ColorSample.rgb * LightVolume.SampleLevel(Material.Wrap_WorldGroupSettings, saturate(CurPos), 0).r;
	// Accumulate current colored sample to the final values.
    AccumulateLightEnergy(AccumulatedLightEnergy, ColorSample);
}

// Performs lit raymarch for the current pixel. The lighting information is taken from a precomputed light volume.
float4 PerformWindowedLitRaymarch(Texture3D DataVolume, // Data Volume 
                              SamplerState DataVolumeSampler,
                              Texture2D TF, // Transfer function texture.
                              Texture3D LightVolume, // Light Volume  
                              float3 CurPos, float Thickness, // CurPos = Entry Position, Thickness is thickness of cube along the ray. Both in UVW space.
                              float StepCount, // How many steps we should take. Actual number of steps taken is StepCount * Thickness.
                              float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                              float4 WindowingParams,
                              FMaterialPixelParameters MaterialParameters) // Material Parameters provided by UE.
{
    // StepSize in UVW is inverse to StepCount.
    float StepSize = 1 / StepCount;
    // Actual number of steps to take to march through the full thickness of the cube at the ray position.
    float FloatActualSteps = StepCount * Thickness;
    // Number of full steps to take.
    int MaxSteps = floor(FloatActualSteps);
    // Size of the last (not a full-sized) step.
    float FinalStep = frac(FloatActualSteps);
    
    // Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, LWCHackToFloat(GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal))) * StepSize;
    // Get step size in local units to get consistent opacity at different volume scale and to be consistent with compute shaders' opacity calculations.
    float StepSizeWorld = VOLUME_DENSITY * StepSize;
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);
   
    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec; // Because we jitter only "against" the direction of LocalCamVec, start marching before first sample.
	    // Any position that is clipped by the clipping plane shall be ignored.
        if (!IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
        {
            AccumulateWindowedRaymarchStep(LightEnergy, CurPos, DataVolume, DataVolumeSampler,
				TF, LightVolume, StepSizeWorld, WindowingParams);

            // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
            if (LightEnergy.a > 0.95f)
            {
                LightEnergy.a = 1.0f;
                break;
            };
        }
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.0f)
    {
        CurPos += LocalCamVec * (FinalStep);
        // If the final step is clipped, don't do anything.
        if (!IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
        {
            AccumulateWindowedRaymarchStep(LightEnergy, CurPos, DataVolume, DataVolumeSampler,
            TF, LightVolume, VOLUME_DENSITY * FinalStep, WindowingParams);
        }
    }

    return LightEnergy;
}


uint GetBitNumber(float InValue)
{
	float Factor = 1.0/32.0;
	return asuint(InValue/Factor);
}

// Performs octree raymarch for the current pixel.
float4 PerformWindowedRaymarchOctree(Texture3D DataVolume, // Data Volume 
                              SamplerState DataVolumeSampler,
                              Texture2D TF, // Transfer function texture.
                              float3 CurPos, float Thickness, // CurPos = Entry Position, Thickness is thickness of cube along the ray. Both in UVW space.
                              float StepCount, // How many steps we should take. Actual number of steps taken is StepCount * Thickness.
                              float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                              float4 WindowingParams,
                              Texture3D OctreeVolume,
                              SamplerState OctreeVolumeSampler,
                              uint OctreeMip,
                              FMaterialPixelParameters MaterialParameters) // Material Parameters provided by UE.
{
	// StepSize in UVW is inverse to StepCount.
	float StepSize = 1 / StepCount;
	// Actual number of steps to take to march through the full thickness of the cube at the ray position.
	float FloatActualSteps = StepCount * Thickness;
	// Number of full steps to take.
	int MaxSteps = floor(FloatActualSteps);
	// Size of the last (not a full-sized) step.
	float FinalStep = frac(FloatActualSteps);
	
	// Get camera vector in local space and multiply it by step size.
	float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, LWCHackToFloat(GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal))) * StepSize;
	// Get step size in local units to get consistent opacity at different volume scale and to be consistent with compute shaders' opacity calculations.
	 float StepSizeWorld = VOLUME_DENSITY * StepSize;
	// Initialize accumulated light energy.
	float4 LightEnergy = 0;
	// Jitter Entry position to avoid artifacts.
	JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);

	// Get the volume depth for later use when recalculating coordinates.
	float DataVolumeWidth = 0, DataVolumeHeight = 0, DataVolumeDepth = 0;
	DataVolume.GetDimensions(DataVolumeWidth, DataVolumeHeight, DataVolumeDepth);
	
	float OctreeWidth = 0, OctreeHeight = 0, OctreeDepth = 0, OctreeMipCount = 0;
	OctreeVolume.GetDimensions(OctreeWidth, OctreeHeight, OctreeDepth);
	// Copy the octree depth on mip level 0 for use when recalculating to correct texture coordinates.
	float OctreeDepthConst = OctreeDepth;

	// Get the bit number based on window center and window width.s 
	uint WindowNumber = GetWindowingParamsBitNumber(WindowingParams.x, WindowingParams.y);

	int CurrentMip = OctreeMip;
	int StepsCount = 0;

	// Check if the entry position is behind the plane. If yes, find the intersection point between the ray and the plane and
	// use it as a starting point for out algorithm.
	if(IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
	{
		CurPos = LinePlaneIntersection(ClippingCenter, ClippingDirection, CurPos, LocalCamVec);
	}

	// Octree raymarch algorithm usually exits way before this condition fails. But let it here just to be sure it will not break anything. 
	while(StepsCount++ < MaxSteps)
	{
		if(IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
		{
			CurPos += LocalCamVec;
			continue;
		}
		if(StepsCount > 2)
		{
			// We reached the end of the cube.
			if(CurPos.x > 1.0 || CurPos.y > 1.0 || CurPos.z > 1.0 || CurPos.x < 0 || CurPos.y < 0 || CurPos.z < 0)
			{
				break;
			}
		}
		// Get the correct width, height and depth for current mip.
		OctreeVolume.GetDimensions(CurrentMip, OctreeWidth, OctreeHeight, OctreeDepth, OctreeMipCount);

		// Calculate the correct position in octree. The Z coordinate needs to be multiplied by ratio of the base volume depth vs base octree volume depth.
		// Multiply all the values by their respective volume size to get actual texel coordinates instead af UV coordinates.
		int3 VoxelPos = int3(CurPos.x * OctreeWidth, CurPos.y * OctreeHeight, (CurPos.z * DataVolumeDepth / OctreeDepthConst) * OctreeDepth);

		// Get the bit number saved in octree volume and check it against current window. In case the and operator results in true, the
		// value in the volume should be used. If not, find the next position in volume upper mip and starts again. 
		const uint BitNumber = asuint(OctreeVolume.Load(int4(VoxelPos, CurrentMip), 0).r);
		if (!(BitNumber & WindowNumber))
		{
			float ZRealDepth = (DataVolumeDepth / OctreeDepthConst) * OctreeDepth;
			float3 BoxMin = float3(VoxelPos.x / OctreeWidth, VoxelPos.y / OctreeHeight, int(CurPos.z * ZRealDepth) / ZRealDepth);
			float3 BoxMax = float3((VoxelPos.x + 1) / OctreeWidth, (VoxelPos.y + 1) / OctreeHeight, (int(CurPos.z * ZRealDepth) + 1) / ZRealDepth);
			float2 EntryTimes = float2(0,0);
			if (CheckedRayAABBIntersection(CurPos, LocalCamVec, BoxMin, BoxMax, EntryTimes))
			{
				float Rest = ceil(EntryTimes.y) - EntryTimes.y;
				CurPos += (LocalCamVec * EntryTimes.y) + (LocalCamVec * Rest);

				CurrentMip = 3;
				continue;
			}
			// The ray gets out from the area it is supposed to be. Exit the loop.
			break;
		}

		if (CurrentMip == 0)
		{
			float4 ColorSample = SampleWindowedVolumeStep(CurPos, StepSizeWorld, DataVolume, DataVolumeSampler,
													TF, Material.Clamp_WorldGroupSettings, WindowingParams);

			AccumulateLightEnergy(LightEnergy, ColorSample);

			CurPos += LocalCamVec;
		}
		else
		{
			CurrentMip -= 1;
		}
        	
		// Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
		if (LightEnergy.a > 0.95f)
		{
			LightEnergy.a = 1.0f;
			break;
		};
	}

     // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    //if (i == MaxSteps && FinalStep > 0.0f)
    //{
    //    CurPos += LocalCamVec * FinalStep;
    //    // If the final step is clipped, don't do anything.
    //    if (!IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
    //    {
    //    	float3 VoxelPos = float3(CurPos.x * OctreeWidth, CurPos.y * OctreeHeight, (CurPos.z * DataVolumeDepth / OctreeDepthConst) * OctreeDepth);
    //    	float4 ColorSample = SampleWindowedVolumeOctreeStep(VoxelPos, StepSizeWorld, OctreeVolume,
    //                                           TF, Material.Clamp_WorldGroupSettings, WindowingParams, OctreeMip);

    //    	AccumulateLightEnergy(LightEnergy, ColorSample);
    //    }
    //}

    return LightEnergy;
}


// Performs lit raymarch for the current pixel. The lighting information is taken from a precomputed light volume.
float4 PerformWindowedIntensityRaymarch(Texture3D DataVolume, // Data Volume 
                              float3 CurPos, float Thickness, // Position of ray entry to cube and thickness in UVW coords.
                              float StepCount, // Number of steps to take if Thickness is 1. 
                              float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                              float4 WindowingParams,
                              FMaterialPixelParameters MaterialParameters)                      // Material Parameters
{
    // StepSize in UVW is inverse to StepCount.
    float StepSize = 1 / StepCount;
    // Actual number of steps to take to march through the full thickness of the cube at the ray position.
    float FloatActualSteps = StepCount * Thickness;
    // Number of full steps to take.
    int MaxSteps = floor(FloatActualSteps);
    // Size of the last (not a full-sized) step.
    float FinalStep = frac(FloatActualSteps);
    
    // Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, LWCHackToFloat(GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal))) * StepSize;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);
   
    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec; // Because we jitter only "against" the direction of LocalCamVec, start marching before first sample.
	    // Any position that is clipped by the clipping plane shall be ignored.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            float DataValue = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
  
            // WindowingParams.x == Center, WindowingParams.y = Width
            float TFPos = clamp(GetTransferFuncPosition(DataValue, WindowingParams.x, WindowingParams.y), 0, 1);

            return float4(TFPos, TFPos, TFPos, 1);
        }
    }

    // Handle FinalStep (if the final step size is above zero).
    if (FinalStep > 0.0f)
    {
        CurPos += LocalCamVec * (FinalStep);
        // If the final step is clipped, don't do anything.
        if (!IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
        {
            float DataValue = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, CurPos, 0).r;
  
            // WindowingParams.x == Center, WindowingParams.y = Width
            float TFPos = clamp(GetTransferFuncPosition(DataValue, WindowingParams.x, WindowingParams.y), 0, 1);

            return float4(TFPos, TFPos, TFPos, 1);
        }
    }
    
    // Didn't hit anything
    return float4(0.0, 0.0, 0.0, 0.0);
}