// Copyright 2021 Tomas Bartipan and Technical University of Munich.
// Licensed under MIT license - See License.txt for details.
// Special credits go to : Temaran (compute shader tutorial), TheHugeManatee (original concept, supervision) and Ryan Brucks
// (original raymarching code).

//
// This shader generates an Octree acceleration structure.
//

#include "/Engine/Private/Common.ush"
#include "OctreeCommon.usf"

// The Octree Volume texture we're creating in this shader.
RWTexture3D<uint> OctreeVolumeMip0;
RWTexture3D<uint> OctreeVolumeMip1;
RWTexture3D<uint> OctreeVolumeMip2;
RWTexture3D<uint> OctreeVolumeMip3;

// The Volume we're propagating light through.
Texture3D Volume;

int LeafNodeSize = 8;
int NumberOfMips = 4;

uint GetValueIndexInBitMask(float Val)
{
    const uint MaxBits = 31;
    const float Factor = 1.0/float(MaxBits);
    return uint(Val / Factor);
}

[numthreads(1, 1, 1)]
void MainComputeShader(uint3 voxelLoc : SV_DispatchThreadID)
{
	// Position in Leaf space (index of the leaf in the octree that this shader will generate)
	int3 Pos = int3(voxelLoc.x, voxelLoc.y, voxelLoc.z);
	int3 ThreadOffset = Pos * LeafNodeSize;

	// Copy the data from the input volume to maximal resolution mip first.
	for (int x = 0; x < LeafNodeSize; x++)
	{
		for (int y = 0; y < LeafNodeSize; y++)
		{
			for (int z = 0; z < LeafNodeSize; z++)
			{
				int3 LocalPos = int3(x, y, z);
				int3 ActualPos = ThreadOffset + LocalPos;

				uint XorredNeighborhood = 0;
			    float Min = 1.0;
			    float Max = 0.0;
				// We want to have the leaf node composed from minimum of 4 nearest values for each axis.
				for (int a = -1; a <= 1; a++)
				{
					for (int b = -1; b <= 1; b++)
					{
						for (int c = -1; c <= 1; c++)
						{
							int3 NeighborhoodPosition = ActualPos + int3(a,b,c);
							float Value = Volume.Load(int4(NeighborhoodPosition, 0), 0).r;
                            Min = min(Min, Value);
                            Max = max(Max, Value);
						}
					}
				}

			    uint BitMax = GetValueIndexInBitMask(Max);
			    uint BitMin = GetValueIndexInBitMask(Min);

			    for(uint i = BitMin; i <= BitMax; i++)
			    {
			        XorredNeighborhood |= (1 << i);    
			    }
			    
				OctreeVolumeMip0[ActualPos] = XorredNeighborhood;
			}
		}
	}

	// Make sure the number of mips defined equals the number of UAVs mips.
	const int HardcodedNumberOfMips = 4;
	if(HardcodedNumberOfMips != NumberOfMips)
	{
		return;
	}
	
	// Generate the rest of mip levels (1 to NumberOfMips).
	RWTexture3D<uint> Mips[HardcodedNumberOfMips] = { OctreeVolumeMip0, OctreeVolumeMip1, OctreeVolumeMip2, OctreeVolumeMip3 };
	for (int Mip = 1; Mip < HardcodedNumberOfMips; Mip++)
	{
		RWTexture3D<uint> MipBuffer = Mips[Mip];

		int Divisor = 1;
		for (int i = 0; i < Mip; i++)
		{
			Divisor *= 2;
		}

		// Offset that declare the starting position of the mip we load data from (Mip - 1).
		int3 LowerMipOffset = (2 * ThreadOffset) / Divisor;
		for (int x = 0; x < LeafNodeSize / Divisor; x++)
		{
			for (int y = 0; y < LeafNodeSize / Divisor; y++)
			{
				for (int z = 0; z < LeafNodeSize / Divisor; z++)
				{
					int3 LocalPos = int3(x, y, z);
					
					// Multiply LocalPos by two to get the correct position we can load data from in range <0,1>.
					int3 CurrentPositionOffset = LowerMipOffset + LocalPos * 2;		

					uint Xor = 0;
					for (int a = 0; a < 2; a ++)
					{
						for (int b = 0; b < 2; b ++)
						{
							for (int c = 0; c < 2; c ++)
							{
								// Take current offset and append the final offset value to get the correct data position.  
								int3 FinalPos = CurrentPositionOffset + int3(a, b, c);
								uint NodeValue = Mips[Mip-1][FinalPos];
								Xor |= NodeValue;
							}
						}
					}
					int3 MipPos = ThreadOffset/Divisor + LocalPos;
					// Insert the value to the Mip.
					MipBuffer[MipPos] = Xor;
				}
			}
		}
	}
}
